<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tiko&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tiko-lz1e.github.io/"/>
  <updated>2020-01-09T04:44:13.955Z</updated>
  <id>https://tiko-lz1e.github.io/</id>
  
  <author>
    <name>Tiko</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>带标签文本分类工具</title>
    <link href="https://tiko-lz1e.github.io/2020/01/08/%E5%B8%A6%E6%A0%87%E7%AD%BE%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E5%B7%A5%E5%85%B7/"/>
    <id>https://tiko-lz1e.github.io/2020/01/08/%E5%B8%A6%E6%A0%87%E7%AD%BE%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E5%B7%A5%E5%85%B7/</id>
    <published>2020-01-08T14:59:44.000Z</published>
    <updated>2020-01-09T04:44:13.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a>任务目标</h2><p>现在有一些带有标签的数据储存在不含header的tsv文件中（格式如下），需要使用正则表达式来判断后面的文本数据是否符合前面所有的标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A,B,这条文本仅符合标签A</span><br><span class="line">C,这条文本符合标签C</span><br></pre></td></tr></table></figure><h2 id="跨平台带来的问题"><a href="#跨平台带来的问题" class="headerlink" title="跨平台带来的问题"></a>跨平台带来的问题</h2><h3 id="文件编码问题"><a href="#文件编码问题" class="headerlink" title="文件编码问题"></a>文件编码问题</h3><p>win平台默认使用GB2312编码，而mac平台默认使用utf-8编码，这里使用chardet.detect()函数先行对文件编码方式进行判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_encoding</span><span class="params">(self, file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    辨别文件编码方式</span></span><br><span class="line"><span class="string">    :param file: 文件路径</span></span><br><span class="line"><span class="string">    :return: 文件编码方式</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> chardet.detect(f.read())[<span class="string">'encoding'</span>]</span><br></pre></td></tr></table></figure><h3 id="清屏问题"><a href="#清屏问题" class="headerlink" title="清屏问题"></a>清屏问题</h3><p>使用os.name来获取平台标记，在不同的平台使用不同的清屏命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">screen_cleaner</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据平台进行清屏操作</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self.plat <span class="keyword">is</span> <span class="string">'nt'</span>:  <span class="comment"># win系列平台</span></span><br><span class="line">        os.system(<span class="string">'cls'</span>)</span><br><span class="line">    <span class="keyword">else</span>:   <span class="comment"># Linux系列平台</span></span><br><span class="line">        os.system(<span class="string">"clear"</span>)</span><br></pre></td></tr></table></figure><h2 id="读取文件中的数据"><a href="#读取文件中的数据" class="headerlink" title="读取文件中的数据"></a>读取文件中的数据</h2><h3 id="历史记录功能"><a href="#历史记录功能" class="headerlink" title="历史记录功能"></a>历史记录功能</h3><p>由于数据量比较大，在处理过程中可能需要中断处理，并且希望在下次读取该文件时，继续上次的进度。<br>可以在结果文件夹中创建一个名为“history.txt”的文件，当接收到键盘输入中断时，捕获KeyboardInterrupt异常，将当前进度写入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    self.screen_cleaner()</span><br><span class="line">    <span class="keyword">if</span> self.re_confirm(<span class="string">"是否更新历史信息?"</span>):</span><br><span class="line">        self.classes.update(classes)</span><br><span class="line">        <span class="keyword">with</span> open(data[<span class="string">'info'</span>][<span class="string">'h_file_path'</span>], <span class="string">"w"</span>, encoding=<span class="string">"UTF-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(str(i))</span><br></pre></td></tr></table></figure><p>当每次打开一个数据文件时，检查该文件是否存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(h_file_path, <span class="string">"r"</span>, encoding=<span class="string">"UTF-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        info[<span class="string">'history'</span>] = int(f.read())</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    info[<span class="string">"history"</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="用户确认"><a href="#用户确认" class="headerlink" title="用户确认"></a>用户确认</h3><p>由于没有撤回功能，当用户进行某些操作，比如中止分类时，可能需要用户再次进行确认。<br>我们可以写一个re_confirm函数来实现这个功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_confirm</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">    c = input(<span class="string">"\n[!]"</span> + msg + <span class="string">"[Y/N]:\n"</span>)</span><br><span class="line">    confirm = <span class="literal">True</span> <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">"yY"</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> confirm</span><br></pre></td></tr></table></figure><h3 id="读取数据文件"><a href="#读取数据文件" class="headerlink" title="读取数据文件"></a>读取数据文件</h3><p>这时，我们就可以读取文件中的数据，准备开始分类工作了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file_path, <span class="string">"r"</span>, encoding=info[<span class="string">'encoding'</span>]) <span class="keyword">as</span> f:</span><br><span class="line">    f_lines = f.readlines()</span><br><span class="line">    f_list = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f_lines:</span><br><span class="line">        line_cuted = line.split(<span class="string">'\t'</span>)</span><br><span class="line">        list_tag = line_cuted[<span class="number">0</span>].split(<span class="string">','</span>)[:<span class="number">-1</span>]</span><br><span class="line">        text = <span class="string">""</span>.join(line_cuted[<span class="number">-1</span>].split())</span><br><span class="line">        f_list.append([list_tag, text])</span><br><span class="line">    pre_len = len(f_list)</span><br></pre></td></tr></table></figure><h2 id="分类处理"><a href="#分类处理" class="headerlink" title="分类处理"></a>分类处理</h2><h3 id="手动分类"><a href="#手动分类" class="headerlink" title="手动分类"></a>手动分类</h3><p>我们可以将数据和标签依次显示在终端中，等待用户输入数字进行分类。<br>此时我们希望用户至少输入一个数字，所以对变量c进行了长度判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(i, length):</span><br><span class="line">    line = data[<span class="string">'list'</span>][i]</span><br><span class="line">    <span class="comment"># 这一部分需要根据数据格式进行修改</span></span><br><span class="line">    text = <span class="string">""</span>.join(line[<span class="number">-1</span>].split())</span><br><span class="line">    tags = line[<span class="number">0</span>]</span><br><span class="line">    print(<span class="string">'\n\n'</span> + str(tags) + <span class="string">'\n'</span>)</span><br><span class="line">    print(text + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    c = <span class="string">""</span>  <span class="comment"># 记录用户输入的类别号</span></span><br><span class="line">    <span class="keyword">while</span> len(c) &lt; <span class="number">1</span>:</span><br><span class="line">        c = input(<span class="string">"请输入类别号："</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        classes[c].append(line)</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        classes[c] = [line]</span><br><span class="line"></span><br><span class="line">    self.screen_cleaner()</span><br></pre></td></tr></table></figure><h3 id="自动分类"><a href="#自动分类" class="headerlink" title="自动分类"></a>自动分类</h3><h4 id="规则文件"><a href="#规则文件" class="headerlink" title="规则文件"></a>规则文件</h4><p>在自动分类的情况下，我们希望将标签对应的正则表达式写在tsv文件中，格式如下，前面为标签，后面为一个或多个正则表达式，用tab分隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A^.*[A]^.*[a]</span><br><span class="line">B^.*[Bb]</span><br><span class="line">C^.*[Cc]</span><br></pre></td></tr></table></figure><h4 id="自动分类-1"><a href="#自动分类-1" class="headerlink" title="自动分类"></a>自动分类</h4><p>读取了规则，就可以进行自动化的分类。<br>我们可以使用一个log变量来决定是否展示每一个数据分类的结果并等待用户确认。<br>同时，我们可以使用tqdm库实现一个进度条。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trange(i, length) <span class="keyword">as</span> t:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">        line = data[<span class="string">'list'</span>][i]</span><br><span class="line">        <span class="comment"># 这一部分需要根据数据格式进行修改</span></span><br><span class="line">        text = <span class="string">""</span>.join(line[<span class="number">-1</span>].split())</span><br><span class="line">        tags = line[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> log:</span><br><span class="line">            print(<span class="string">'\n\n'</span> + str(tags) + <span class="string">'\n'</span>)</span><br><span class="line">            print(text + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">        c = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">            <span class="keyword">if</span> tag <span class="keyword">not</span> <span class="keyword">in</span> patterns[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">if</span> log:</span><br><span class="line">                    print(<span class="string">"\n[!]Tag【&#123;0&#125;】不存在对应的规则\n"</span>.format(tag))</span><br><span class="line">                c = <span class="string">"包含未经处理的Tag"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> pattern_c <span class="keyword">in</span> patterns[<span class="number">1</span>][tag]:</span><br><span class="line">                    pattern_c = <span class="string">""</span>.join(pattern_c.split())</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">if</span> re.match(pattern_c, text):</span><br><span class="line">                            <span class="keyword">if</span> log:</span><br><span class="line">                                print(<span class="string">"\n[+]Tag【&#123;0&#125;】与规则【&#123;1&#125;】匹配\n"</span>.format(tag, pattern_c))</span><br><span class="line">                            flag = <span class="number">1</span></span><br><span class="line">                            <span class="keyword">if</span> len(c) &lt; <span class="number">1</span>:</span><br><span class="line">                                c = <span class="string">"匹配"</span></span><br><span class="line">                    <span class="keyword">except</span> re.error:</span><br><span class="line">                        <span class="keyword">if</span> log:</span><br><span class="line">                            print(<span class="string">"\n[!]正则表达式【&#123;0&#125;】格式错误\n"</span>.format(pattern_c))</span><br><span class="line">                            input()</span><br><span class="line">                <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> log:</span><br><span class="line">                        print(<span class="string">"\n[-]Tag【&#123;0&#125;】不存在与文本相匹配的规则\n"</span>.format(tag))</span><br><span class="line">                    <span class="keyword">if</span> c != <span class="string">"包含未经处理的Tag"</span>:</span><br><span class="line">                        c = <span class="string">"不匹配"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> log:</span><br><span class="line">            print(<span class="string">"\n分类信息：&#123;&#125;"</span>.format(c))</span><br><span class="line">            input()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># if line not in classes[c]:  # 去重</span></span><br><span class="line">            classes[c].append(line)</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            classes[c] = [line]</span><br><span class="line">        <span class="keyword">if</span> log:</span><br><span class="line">            self.screen_cleaner()</span><br><span class="line">t.close()</span><br><span class="line">self.classes.update(classes)</span><br></pre></td></tr></table></figure><h3 id="退出分类器"><a href="#退出分类器" class="headerlink" title="退出分类器"></a>退出分类器</h3><p>用户在退出时，如果有尚未保存的数据，进行提醒。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classifier_closer</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.classes:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.re_confirm(<span class="string">"还有数据尚未保存，是否确认退出?"</span>):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">"\n【退出Tiko分类器】\n"</span>)</span><br><span class="line">    sys.exit()</span><br></pre></td></tr></table></figure><h2 id="项目GitHub地址"><a href="#项目GitHub地址" class="headerlink" title="项目GitHub地址"></a>项目GitHub地址</h2><p><a href="https://github.com/Tiko-Lz1e/Tiko_classifier" target="_blank" rel="noopener">https://github.com/Tiko-Lz1e/Tiko_classifier</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;任务目标&quot;&gt;&lt;a href=&quot;#任务目标&quot; class=&quot;headerlink&quot; title=&quot;任务目标&quot;&gt;&lt;/a&gt;任务目标&lt;/h2&gt;&lt;p&gt;现在有一些带有标签的数据储存在不含header的tsv文件中（格式如下），需要使用正则表达式来判断后面的文本数据是否符合前面
      
    
    </summary>
    
    
    
      <category term="正则表达式" scheme="https://tiko-lz1e.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="文本分类" scheme="https://tiko-lz1e.github.io/tags/%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tiko-lz1e.github.io/2020/01/08/hello-world/"/>
    <id>https://tiko-lz1e.github.io/2020/01/08/hello-world/</id>
    <published>2020-01-08T09:25:12.556Z</published>
    <updated>2020-01-08T09:25:12.556Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
